// ○ matlab 프로그래밍
	// ● 연산자
		// 괄호 > 단항(거듭제곱 > NOT) ♣ > 산술 > 관계 > 논리(AND > OR) > 대입 > 콤마

		// 1. 관계 연산자
			// A < B
			// A > B
			// A <= B
			// A >= B
			// A == B : 같다
			// A ~= B : 다르다

			// 관계의 결과인 논리벡터 ~= 일반 숫자 벡터 >> 변환 필요 ♣
			// 숫자 배열(논리 배열) >> 논리값이 1인 위치에서 숫자 배열의 원소 추출 ♣
			// 숫자 배열(숫자 배열) >> 해당 인덱스 위치에서 숫자 배열의 원소 추출 ♣

		// 2. 논리 연산자
			// A & B : AND
				// >> 연산 모두 수행
			// A | B : OR
				// >> 연산 모두 수행
			// ~A : NOT
				// >> 연산 모두 수행
			// A && B : Short-Circuit AND
				// >> A가 0이면 뒤 연산 수행 x ♣
			// A || B : Short-Circuit OR
				// >> A가 1이면 뒤 연산 수행 x ♣
			// xor(A, B) : Exclusive OR
				// >> 둘 중 딱 하나만 True(1)이면 1 ♣

			// 0 : False(0) ♣
			// 0을 제외한 모든 수 : True(1) ♣

		// 3. 내장 논리 함수 ♣
			// and(A, B) : AND
			// or(A, B) : OR
			// not(A) : NOT
			// xor(A, B) : Exclusive OR
			// any(A) : 벡터인 경우, 원소 중 하나라도 0이 아니면 1. 모두 0이면 0 ♣
			// any(A, dim) : 행렬인 경우, 각 열을 벡터로 취급. 원소 중 하나라도 0이 아니면 1. 모두 0이면 0 >> ◆ 행벡터 출력 ◆

			// ischar(A) : 글자배열 여부
			// isempty(A) : 빈 행렬 여부
			// isinf(A) : 원소 무한대 여부 >> ◆ 행벡터 출력 ◆ ♣
			// isnan(A) : 원소 NaN 여부 >> ◆ 행벡터 출력 ◆ ♣
			// logical(A) : 숫자배열을 논리배열로 변환
			// islogical(A) : 논리 배열 여부
			// isnumeric(A) : 숫자 배열 여부

			// find(A) : 0이 아닌 원소 주소 >> ◆ 행벡터 출력 ◆ ♣♣♣♣
			// [i, j, v] = find(A) : 0이 아닌 원소 주소 (i, j)와 값 v >> 차례대로 출력 ♣

	// ● 제어문 : 문장 실행 순서에 영향
		// 0. 프로그램 흐름 제어
			// 0) 순차 구조
			// 1) 선택 구조
			// 2) 반복 구조

		// 1. 조건문 : 조건에 따른 수행
			// 1) if문
				// if 조건식
					// 문장
				// elseif(조건) ♣♣♣
					// 문장
				// else
					// 문장
				// end

			// 2) switch문
				// switch 조건식
					// case 값1
						// 문장
					// case {값1, 값2, 값3} ♣
						// 문장
					// otherwise ♣
						// 문장
				// end

				// - 특징 : 
					// case 뒤는 조건식의 경우 값(여러 값 가능)을 기입
					// case 값1 명령어가 2개 이상인 경우 더 먼저 쓴 case문만 실행
					// otherwise는 else와 같은 역할

		// 2. 반복문 : 
			// 1) while문
				// while 조건식
					// 문장
				// end

				// while 조건식, 문장, end ♣

			// 2) for문 ... 배열과 같은 원리로 추출
				// for k = f:s:t
					// 문장
				// end

				// for k = [5 3 8 -2 4]
					// 문장
				// end

				// for k = [5 3 8; -2 4 3; 7 1 5] ... 배열과 같은 원리로 하나씩 추출 ♣
					// 문장
				// end

				// for k = f:s:t, 문장, end ♣

				// - 특징 ♣
					// f>t & s>0 : 루프 실행 x
					// f<t & s<0 : 루프 실행 x
					// f=t : 루프 1번만 실행
					// s가 1이면 f:t로 표현 가능
					// k가 루프 내에서 재정의되면 안된다
					// k는 for문 돌면서 계속 변화

			// 3) break : 반복문 빠져나감
			// 4) continue : 반복문 빠져나감 + 다음 반복문 시작
			// 5) pause(sec) : 반복문 sec초 동안 중지

	// ● 문자열 입출력 함수 ♣
		// string1 = input('문자열을 입력하세요 >> ') : 문자열 입력 받음
		// fprint('%s는 문자열 입니다.\n', string1) : 문자열 출력
		// error('오류 메시지 입니다') : 오류문 출력